#+TITLE: StatisticsWithJulia Introducing Julia - DRAFT
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 2021-01-04 Mon 23:58
#+SETUPFILE: ../../../hugo.setup
#+SETUPFILE: ../../../theme-readtheorg.setup
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t


* Introducing Julia - DRAFT
:PROPERTIES:
:NOTER_PAGE: (13 . 0.090909)
:END:
** Link on page 15: [[https://github.com/h-Klok/StatsWithJuliaBook][https://github.com/h-Klok/StatsWithJuliaBook]]
:PROPERTIES:
:NOTER_PAGE: (15 . 0.419867)
:END:
** Language Overview
:PROPERTIES:
:NOTER_PAGE: (16 . 0.090909)
:END:
*** Link on page 16: [[https://julialang.org/][https://julialang.org/]]
:PROPERTIES:
:NOTER_PAGE: (16 . 0.446677)
:END:
*** Link on page 17: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/helloWorld.jl][Hello world and perfect squares]]
:PROPERTIES:
:NOTER_PAGE: (17 . 0.297135)
:END:
*** Link on page 18: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/comprehension.jl][Using a comprehension]]
:PROPERTIES:
:NOTER_PAGE: (18 . 0.607385)
:END:
*** Link on page 19: [[https://docs.julialang.org][https://docs.julialang.org]]
:PROPERTIES:
:NOTER_PAGE: (19 . 0.471538)
:END:
*** Link on page 19: [[https://docs.julialang.org/][https://docs.julialang.org/]]
:PROPERTIES:
:NOTER_PAGE: (19 . 0.833328)
:END:
*** Link on page 21: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/slow.jl][Slow code example]]
:PROPERTIES:
:NOTER_PAGE: (21 . 0.23985)
:END:

#+begin_src julia :async t :exports both :results output
using Statistics

@time begin

    data = Float64[]
    for _ in 1:10^6
        group = Float64[]
        for _ in 1:5*10^2
            push!(group,rand())
        end
        push!(data,mean(group))
    end
    println("98% of the means lie in the estimated range: ",
                (quantile(data,0.01),quantile(data,0.99)) )
end
#+end_src
*** Link on page 21: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/fast.jl][Fast code example]]
:PROPERTIES:
:NOTER_PAGE: (21 . 0.727734)
:END:

#+begin_src julia :async t :exports both :results output
using Statistics

@time begin
    data = [mean(rand(5*10^2)) for _ in 1:10^6]
    println("98% of the means lie in the estimated range: ",
                    (quantile(data,0.01),quantile(data,0.99)) )
end
#+end_src

#+RESULTS:
: 98% of the means lie in the estimated range: (0.46996439638573045, 0.5300740324223876)
:   1.127390 seconds (1.74 M allocations: 3.936 GiB, 7.61% gc time)

*** Link on page 23: [[https://docs.julialang.org/en/v1/manual/variables-and-scoping/][https://docs.julialang.org/en/v1/manual/variables-and-scoping/]]
:PROPERTIES:
:NOTER_PAGE: (23 . 0.748116)
:END:
*** Link on page 24: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/variableScope.jl][Variable scope and the global keyword]]
:PROPERTIES:
:NOTER_PAGE: (24 . 0.473624)
:END:

#+begin_src julia :async t :exports both :results output
data = [1,2,3]
s = 0
beta, gamma = 2, 1

for i in 1:length(data)
    print(i," ")
    global s    #This usage of the `global` keyword is not needed in Jupyter
                #But elsewhere without it:
                #ERROR: LoadError: UndefVarError: s not defined
    s += beta*data[i]
    data[i] *= -1
end
# print(i)       #Would cause ERROR: LoadError: UndefVarError: i not defined
println("\nSum of data in external scope: ", s)

function sumData(beta)
    s = 0           #try adding the prefix global
    for i in 1:length(data)
        s += data[i] + gamma
    end
    return s
end
println("Sum of data in a function: ", sumData(beta/2))
@show s
#+end_src
** Setup and Interface
:PROPERTIES:
:NOTER_PAGE: (25 . 0.412427)
:END:



*** Link on page 25: [[https://julialang.org/downloads/][https://julialang.org/downloads/]]
:PROPERTIES:
:NOTER_PAGE: (25 . 0.782005)
:END:
*** Link on page 26: [[https://github.com/h-Klok/StatsWithJuliaBook][the bookâ€™s]]
:PROPERTIES:
:NOTER_PAGE: (26 . 0.348039)
:END:
**** Link on page 26: [[https://github.com/h-Klok/StatsWithJuliaBook][GitHub]]
:PROPERTIES:
:NOTER_PAGE: (26 . 0.365146)
:END:
**** Link on page 27: [[https://julialang.org/packages/][https://julialang.org/packages/]]
:PROPERTIES:
:NOTER_PAGE: (27 . 0.497698)
:END:
**** Link to document on page 28: [[file:QQQQ.pdf][*Base.jl]] (target page: 1)
:PROPERTIES:
:NOTER_PAGE: (28 . 0.283018)
:END:
**** Link on page 28: [[https://github.com/JuliaIO/BSON.jl][BSON.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.312073)
:END:
**** Link on page 28: [[https://github.com/JuliaMath/Calculus.jl][Calculus.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.341129)
:END:
**** Link on page 28: [[https://github.com/JuliaData/CategoricalArrays.jl][CategoricalArrays.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.387292)
:END:
**** Link on page 28: [[https://github.com/JuliaStats/Clustering.jl][Clustering.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.416347)
:END:
**** Link on page 28: [[https://github.com/JuliaMath/Combinatorics.jl][Combinatorics.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.445404)
:END:
**** Link on page 28: [[https://github.com/JuliaData/CSV.jl][CSV.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.47446)
:END:
**** Link on page 28: [[https://github.com/JuliaData/DataFrames.jl][DataFrames.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.503515)
:END:
**** Link on page 28: [[https://github.com/JuliaCollections/DataStructures.jl][DataStructures.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.532571)
:END:
**** Link on page 28: [[https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/docs/src/index.md][*Dates.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.561626)
:END:
**** Link on page 28: [[https://github.com/bensadeghi/DecisionTree.jl][DecisionTree.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.590682)
:END:
**** Link on page 28: [[https://github.com/JuliaDiffEq/DifferentialEquations.jl][DifferentialEquations.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.619737)
:END:
**** Link on page 28: [[https://github.com/JuliaStats/Distributions.jl][Distributions.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.665902)
:END:
**** Link on page 28: [[https://github.com/FluxML/Flux.jl][Flux.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.694957)
:END:
**** Link on page 28: [[https://github.com/JuliaStats/GLM.jl][GLM.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.724013)
:END:
**** Link on page 28: [[https://github.com/stevengj/HCubature.jl][HCubature.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.752226)
:END:
**** Link on page 28: [[https://github.com/JuliaStats/HypothesisTests.jl][HypothesisTests.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.782124)
:END:
**** Link on page 28: [[https://github.com/JuliaWeb/HTTP.jl][HTTP.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.811179)
:END:
**** Link on page 28: [[https://github.com/JuliaLang/IJulia.jl][IJulia.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.840235)
:END:
**** Link on page 28: [[https://github.com/JuliaImages/Images.jl][Images.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.86929)
:END:
**** Link on page 28: [[https://github.com/JuliaIO/JSON.jl][JSON.jl]]
:PROPERTIES:
:NOTER_PAGE: (28 . 0.898346)
:END:
**** Link on page 29: [[https://github.com/JunoLab/Juno.jl][Juno.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.094001)
:END:
**** Link on page 29: [[https://github.com/JuliaStats/KernelDensity.jl][KernelDensity.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.120182)
:END:
**** Link on page 29: [[https://github.com/JuliaStats/Lasso.jl][Lasso.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.146362)
:END:
**** Link on page 29: [[https://github.com/stevengj/LaTeXStrings.jl][LaTeXStrings.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.172543)
:END:
**** Link on page 29: [[https://github.com/mpastell/LIBSVM.jl][LIBSVM.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.197881)
:END:
**** Link on page 29: [[https://github.com/JuliaGraphs/LightGraphs.jl][LightGraphs.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.224904)
:END:
**** Link on page 29: [[https://github.com/JuliaLang/julia/blob/master/stdlib/LinearAlgebra/docs/src/index.md][*LinearAlgebra.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.251085)
:END:
**** Link on page 29: [[https://github.com/JuliaGraphics/Measures.jl][Measures.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.277265)
:END:
**** Link on page 29: [[https://github.com/JuliaML/MLDatasets.jl][MLDatasets.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.319711)
:END:
**** Link on page 29: [[https://github.com/JuliaStats/MultivariateStats.jl][MultivariateStats.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.346734)
:END:
**** Link on page 29: [[https://github.com/JuliaNLSolvers/NLsolve.jl][NLsolve.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.390021)
:END:
**** Link on page 29: [[https://github.com/JuliaPlots/Plots.jl/][Plots.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.416202)
:END:
**** Link on page 29: [[https://github.com/JuliaPy/PyCall.jl][PyCall.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.45949)
:END:
**** Link on page 29: [[https://github.com/JuliaPy/PyPlot.jl][PyPlot.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.48567)
:END:
**** Link on page 29: [[https://github.com/JuliaMath/QuadGK.jl][QuadGK.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.528958)
:END:
**** Link on page 29: [[https://github.com/JuliaLang/julia/blob/master/stdlib/Random/docs/src/index.md][*Random.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.572246)
:END:
**** Link on page 29: [[https://github.com/JuliaInterop/RCall.jl][RCall.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.598427)
:END:
**** Link on page 29: [[https://github.com/johnmyleswhite/RDatasets.jl][RDatasets.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.624607)
:END:
**** Link on page 29: [[https://github.com/JuliaMath/Roots.jl][Roots.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.667895)
:END:
**** Link on page 29: [[https://github.com/JuliaMath/SpecialFunctions.jl][SpecialFunctions.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.694076)
:END:
**** Link on page 29: [[https://github.com/JuliaLang/julia/blob/master/stdlib/Statistics/docs/src/index.md][*Statistics.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.737364)
:END:
**** Link on page 29: [[https://github.com/JuliaStats/StatsBase.jl][StatsBase.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.763544)
:END:
**** Link on page 29: [[https://github.com/JuliaStats/StatsModels.jl][StatsModels.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.806832)
:END:
**** Link on page 29: [[https://github.com/JuliaPlots/StatsPlots.jl][StatsPlots.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.833013)
:END:
**** Link on page 29: [[https://github.com/JuliaStats/TimeSeries.jl][TimeSeries.jl]]
:PROPERTIES:
:NOTER_PAGE: (29 . 0.859193)
:END:
*** Crash Course by Example
:PROPERTIES:
:NOTER_PAGE: (30 . 0.090909)
:END:
**** Link on page 30: [[https://julialang.org/learning/][https://julialang.org/learning/]]
:PROPERTIES:
:NOTER_PAGE: (30 . 0.40791)
:END:
**** Link on page 31: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/bubbleSort.jl][Bubble sort]]
:PROPERTIES:
:NOTER_PAGE: (31 . 0.093426)
:END:


#+begin_src julia :exports both :results output
function bubbleSort!(a)
    n = length(a)
    for i in 1:n-1
        for j in 1:n-i
            if a[j] > a[j+1]
                a[j], a[j+1] = a[j+1], a[j]
            end
        end
    end
    return a
end

data = [65, 51, 32, 12, 23, 84, 68, 1]
bubbleSort!(data)
#+end_src

#+RESULTS:
#+begin_example
bubbleSort! (generic function with 1 method)
8-element Array{Int64,1}:
 65
 51
 32
 12
 23
 84
 68
  1
8-element Array{Int64,1}:
  1
 12
 23
 32
 51
 65
 68
 84
#+end_example


**** Link on page 32: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/polyRoots.jl][Roots of a polynomial]]
:PROPERTIES:
:NOTER_PAGE: (32 . 0.651217)
:END:

x=âˆ’3Â±âˆš32âˆ’4(âˆ’10)2(âˆ’10)=3Â±720â‡’x1= 0.5,  x2=âˆ’0.2

#+begin_src julia :async t :exports both :results output
using Roots

function polynomialGenerator(a...)
    n = length(a)-1
    poly =  function(x)
                return sum([a[i+1]*x^i for i in 0:n])
            end
    return poly
end

polynomial = polynomialGenerator(1,3,-10)
zeroVals = find_zeros(polynomial,-10,10)
println("Zeros of the function f(x): ", zeroVals)
#+end_src

#+RESULTS:
: polynomialGenerator (generic function with 1 method)
: #1 (generic function with 1 method)

**** Link on page 35: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/multiWayMarkovChainStationary.jl][Steady state of a Markov chain in several ways]]
:PROPERTIES:
:NOTER_PAGE: (35 . 0.093426)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/multiWayMarkovChainStationary.jl"
using LinearAlgebra, StatsBase

# Transition probability matrix
P = [0.5 0.4 0.1;
     0.3 0.2 0.5;
     0.5 0.3 0.2]

# First way
piProb1 = (P^100)[1,:]

# Second way
A = vcat((P' - I)[1:2,:],ones(3)')
b = [0 0 1]'
piProb2 = A\b

# Third way
eigVecs = eigvecs(copy(P'))
highestVec = eigVecs[:,findmax(abs.(eigvals(P)))[2]]
piProb3 = Array{Float64}(highestVec)/norm(highestVec,1)

# Fourth way
numInState = zeros(Int,3)
state = 1
N = 10^6
for t in 1:N
    numInState[state] += 1
    global state = sample(1:3,weights(P[state,:]))
end
piProb4 = numInState/N

display([piProb1 piProb2 piProb3 piProb4])
#+end_src
**** Link on page 37: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/shakespeareWords.jl][Web interface, JSON and string parsing]]
:PROPERTIES:
:NOTER_PAGE: (37 . 0.156734)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/shakespeareWords.jl"
using HTTP, JSON

data = HTTP.request("GET",
"https://ocw.mit.edu/ans7870/6/6.006/s08/lecturenotes/files/t8.shakespeare.txt")
shakespeare = String(data.body)
shakespeareWords = split(shakespeare)

jsonWords = HTTP.request("GET",
"https://raw.githubusercontent.com/"*
"h-Klok/StatsWithJuliaBook/master/data/jsonCode.json")
parsedJsonDict = JSON.parse( String(jsonWords.body))

keywords = Array{String}(parsedJsonDict["words"])
numberToShow = parsedJsonDict["numToShow"]
wordCount = Dict([(x,count(w -> lowercase(w) == lowercase(x), shakespeareWords))
                  for x in keywords])

sortedWordCount = sort(collect(wordCount),by=last,rev=true)
display(sortedWordCount[1:numberToShow])
#+end_src
*** Plots, Images and Graphics
:PROPERTIES:
:NOTER_PAGE: (38 . 0.326684)
:END:
**** Link on page 38: [[http://docs.juliaplots.org/][http://docs.juliaplots.org/]]
:PROPERTIES:
:NOTER_PAGE: (38 . 0.734133)
:END:
**** Link on page 39: [[http://tug.ctan.org/info/undergradmath/undergradmath.pdf][Note the use of the LaTeXStrings package enabling L A TEX formatted formulas. See for example, http://tug.ctan.org/info/undergradmath/undergradmath.pdf]]
:PROPERTIES:
:NOTER_PAGE: (39 . 0.546567)
:END:
**** Link on page 39: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/plotSimple.jl][Basic plotting]]
:PROPERTIES:
:NOTER_PAGE: (39 . 0.575085)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/plotSimple.jl"
using Plots, LaTeXStrings, Measures; pyplot()

f(x,y) = x^2 + y^2
f0(x) = f(x,0)
f2(x) = f(x,2)

xVals, yVals = -5:0.1:5 , -5:0.1:5
plot(xVals, [f0.(xVals), f2.(xVals)],
	c=[:blue :red], xlims=(-5,5), legend=:top,
	ylims=(-5,25), ylabel=L"f(x,\cdot)", label=[L"f(x,0)" L"f(x,2)"])
p1 = annotate!(0, -0.2, text("(0,0) The minimum\n of f(x,0)", :left, :top, 10))

z = [ f(x,y) for y in yVals, x in xVals ]
p2 = surface(xVals, yVals, z, c=cgrad([:blue, :red]),legend=:none,
	ylabel="y", zlabel=L"f(x,y)")

M = z[1:10,1:10]
p3 = heatmap(M, c=cgrad([:blue, :red]), yflip=true, ylabel="y",
	xticks=([1:10;], xVals), yticks=([1:10;], yVals))

plot(p1, p2, p3, layout=(1,3), size=(1200,400), xlabel="x", margin=5mm)
#+end_src
**** Link on page 41: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/hailstoneHistogram.jl][Histogram of hailstone sequence lengths]]
:PROPERTIES:
:NOTER_PAGE: (41 . 0.352667)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/hailstoneHistogram.jl"
using Plots; pyplot()

function hailLength(x::Int)
    n = 0
    while x != 1
        if x % 2 == 0
            x = Int(x/2)
        else
            x = 3x +1
        end
        n += 1
    end
    return n
end

lengths = [hailLength(x0) for x0 in 2:10^7]

histogram(lengths, bins=1000, normed=:true,
    fill=(:blue, true), la=0, legend=:none,
    xlims=(0, 500), ylims=(0, 0.012),
    xlabel="Length", ylabel="Frequency")
#+end_src
**** Link on page 42: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/graph.jl][Animated edges of a graph]]
:PROPERTIES:
:NOTER_PAGE: (42 . 0.459516)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/graph.jl"
using Plots; pyplot()

function graphCreator(n::Int)
    vertices = 1:n
    complexPts = [exp(2*pi*im*k/n) for k in vertices]
    coords = [(real(p),imag(p)) for p in complexPts]
    xPts = first.(coords)
    yPts = last.(coords)
    edges = []
    for v in vertices, u in (v+1):n
        push!(edges,(v,u))
    end

    anim = Animation()
    scatter(xPts, yPts, c=:blue, msw=0, ratio=1,
        xlims=(-1.5,1.5), ylims=(-1.5,1.5), legend=:none)

    for i in 1:length(edges)
        u, v = edges[i][1], edges[i][2]
        xpoints = [xPts[u], xPts[v]]
        ypoints = [yPts[u], yPts[v]]
        plot!(xpoints, ypoints, line=(:red))
        frame(anim)
    end

    gif(anim, "graph.gif", fps = 60)
end

graphCreator(16)
#+end_src
**** Link on page 44: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/imageProcessing.jl][Working with images]]
:PROPERTIES:
:NOTER_PAGE: (44 . 0.352884)
:END:


#+begin_src julia :async t :exports both :results output
using Plots, Images; pyplot()

img = load("data/stars.png")
gImg = red.(img)*0.299 + green.(img)*0.587 + blue.(img)*0.114
rows, cols = size(img)

println("Highest intensity pixel: ", findmax(gImg))

function boxBlur(image,x,y,d)
    if x<=d || y<=d || x>=cols-d || y>=rows-d
        return image[x,y]
    else
        total = 0.0
        for xi = x-d:x+d
            for yi = y-d:y+d
                total += image[xi,yi]
            end
        end
        return total/((2d+1)^2)
    end
end

blurImg = [boxBlur(gImg,x,y,5) for x in 1:cols, y in 1:rows]

yOriginal, xOriginal = argmax(gImg).I
yBoxBlur, xBoxBlur   = argmax(blurImg).I

p1 = heatmap(gImg, c=:Greys, yflip=true)
p1 = scatter!((xOriginal, yOriginal), ms=60, ma=0, msw=4, msc=:red)
p2 = heatmap(blurImg, c=:Greys, yflip=true)
p2 = scatter!((xBoxBlur, yBoxBlur), ms=60, ma=0, msw=4, msc=:red)

plot(p1, p2, size=(800, 400), ratio=:equal, xlims=(0,cols), ylims=(0,rows),
	colorbar_entry=false, border=:none, legend=:none)
#+end_src
*** Random Numbers and Monte Carlo Simulation
:PROPERTIES:
:NOTER_PAGE: (45 . 0.482607)
:END:
**** Link on page 46: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/seedExample.jl][Pseudorandom number generation]]
:PROPERTIES:
:NOTER_PAGE: (46 . 0.608444)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/seedExample.jl"
using Random

Random.seed!(1974)
println("Seed 1974: ",rand(),"\t", rand(), "\t", rand())
Random.seed!(1975)
println("Seed 1975: ",rand(),"\t", rand(), "\t", rand())
Random.seed!(1974)
println("Seed 1974: ",rand(),"\t", rand(), "\t", rand())
#+end_src
**** Link on page 47: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/piEstimate.jl][Estimating Ï€]]
:PROPERTIES:
:NOTER_PAGE: (47 . 0.669497)
:END:

#+begin_src julia :async t :exports both :results output

using Random, LinearAlgebra, Plots; pyplot()
Random.seed!()

N = 10^5
data     = [[rand(),rand()] for _ in 1:N]
indata   = filter((x)-> (norm(x) <= 1), data)
outdata  = filter((x)-> (norm(x) > 1), data)
piApprox = 4*length(indata)/N
println("Pi Estimate: ", piApprox)

scatter(first.(indata),last.(indata), c=:blue, ms=1, msw=0)
scatter!(first.(outdata),last.(outdata), c=:red, ms=1, msw=0,
	xlims=(0,1), ylims=(0,1), legend=:none, ratio=:equal)
#+end_src
**** Link on page 48: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/lcg.jl][A linear congruential generator]]
:PROPERTIES:
:noter_page: (48 . 0.620275)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/lcg.jl"
using Plots, LaTeXStrings, Measures; pyplot()

a, c, m = 69069, 1, 2^32
next(z) = (a*z + c) % m

N = 10^6
data = Array{Float64,1}(undef, N)

x = 808
for i in 1:N
    data[i] = x/m
    global x = next(x)
end

p1 = scatter(1:1000, data[1:1000],
    c=:blue, m=4, msw=0, xlabel=L"n", ylabel=L"x_n")
p2 = histogram(data, bins=50, normed=:true,
    ylims=(0,1.1), xlabel="Support", ylabel="Density")
plot(p1, p2, size=(800, 400), legend=:none, margin = 5mm)
#+end_src
**** Link on page 51: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/randomWalks.jl][Random walks and seeds]]
:PROPERTIES:
:NOTER_PAGE: (51 . 0.093426)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/randomWalks.jl"
using Plots, Random, Measures; pyplot()

function path(rng, alpha, n=5000)
    x, y = 0.0, 0.0
    xDat, yDat = [], []
    for _ in 1:n
        flip = rand(rng,1:4)
        if flip == 1
            x += 1
        elseif flip == 2
            y += 1
        elseif flip == 3
            x -= (2+alpha)*rand(rng)
        elseif flip == 4
            y -= (2+alpha)*rand(rng)
        end
        push!(xDat,x)
        push!(yDat,y)
    end
    return xDat, yDat
end

alphaRange = [0.2, 0.21, 0.22]

default(xlabel = "x", ylabel = "y", xlims=(-150,50), ylims=(-250,50))
p1 = plot(path(MersenneTwister(27), alphaRange[1]), c=:blue)
p1 = plot!(path(MersenneTwister(27), alphaRange[2]), c=:red)
p1 = plot!(path(MersenneTwister(27), alphaRange[3]), c=:green)

rng = MersenneTwister(27)
p2 = plot(path(rng, alphaRange[1]), c=:blue)
p2 = plot!(path(rng, alphaRange[2]), c=:red)
p2 = plot!(path(rng, alphaRange[3]), c=:green)

plot(p1, p2, size=(800, 400), legend=:none, margin=5mm)
#+end_src
*** Integration with Other Languages
:PROPERTIES:
:NOTER_PAGE: (52 . 0.090909)
:END:
**** Link on page 52: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/usingR.jl][Using R from Julia]]
:PROPERTIES:
:NOTER_PAGE: (52 . 0.495973)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/randomWalks.jl"

#+end_src

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/usingR.jl"
using CSV, DataFrames, RCall

data1 = CSV.read("data/machine1.csv", header=false)[:,1]
data2 = CSV.read("data/machine2.csv", header=false)[:,1]
data3 = CSV.read("data/machine3.csv", header=false)[:,1]

function R_ANOVA(allData)
    data = vcat([ [x fill(i, length(x))] for (i, x) in
    			enumerate(allData) ]...)
    df = DataFrame(data, [:Diameter, :MachNo])
    @rput df

    R"""
    df$MachNo <- as.factor(df$MachNo)
    anova <- summary(aov( Diameter ~ MachNo, data=df))
    fVal <- anova[[1]]["F value"][[1]][1]
    pVal <- anova[[1]]["Pr(>F)"][[1]][1]
    """
    println("R ANOVA f-value: ", @rget fVal)
    println("R ANOVA p-value: ", @rget pVal)
end

R_ANOVA([data1, data2, data3])
#+end_src
**** Link on page 53: [[https://vincentarelbundock.github.io/Rdatasets/datasets.html][https://vincentarelbundock.github.io/Rdatasets/datasets.html]]
:PROPERTIES:
:NOTER_PAGE: (53 . 0.454936)
:END:
**** Link on page 54: [[https://github.com/h-Klok/StatsWithJuliaBook/blob/master/1_chapter/usingPython.jl][NLP via Pythonâ€™s TextBlob]]
:PROPERTIES:
:noter_page: (54 . 0.434164)
:END:

#+begin_src julia :exports both :tangle "~/data/Jupyter-data-science-environment/notebook/StatsWithJuliaBook/1_chapter/usingPython.jl"
using PyCall
TB = pyimport("textblob")

str =
"""Some people think that Star Wars The Last Jedi is an excellent movie,
with perfect, flawless storytelling and impeccable acting. Others
think that it was an average movie, with a simple storyline and basic
acting. However, the reality is almost everyone felt anger and
disappointment with its forced acting and bad storytelling."""

blob = TB.TextBlob(str)
[ i.sentiment for i in blob.sentences ]
#+end_src
**** Link on page 55: [[https://github.com/JuliaInterop][https://github.com/JuliaInterop]]
:PROPERTIES:
:NOTER_PAGE: (55 . 0.450631)
:END:
